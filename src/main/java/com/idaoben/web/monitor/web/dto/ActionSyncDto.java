package com.idaoben.web.monitor.web.dto;

import com.idaoben.utils.dto_assembler.annotation.EnableAssembling;
import com.idaoben.utils.dto_assembler.annotation.Mapping;
import com.idaoben.utils.dto_assembler.annotation.TypeMapping;
import com.idaoben.web.monitor.dao.entity.Action;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.ZonedDateTime;
import com.idaoben.web.monitor.dao.entity.enums.ActionGroup;
import com.idaoben.web.monitor.dao.entity.enums.FileSensitivity;

/**
*
* 应用行为 Dto接口
* Generated by DAOBEN CODE GENERATOR
* @author  Daoben Code Generator
*/
@ApiModel
@EnableAssembling(mappings = @TypeMapping(from = Action.class))
public interface ActionSyncDto {

    @ApiModelProperty("唯一标识符")
    @Mapping
    String getUuid();

    @ApiModelProperty("百度雪花uid")
    @Mapping
    Long getUid();

    @ApiModelProperty("日志时间戳")
    @Mapping
    ZonedDateTime getTimestamp();

    @ApiModelProperty("本日志行是否有对应的附件")
    @Mapping
    Boolean getWithAttachment();

    @ApiModelProperty("关联的任务ID")
    @Mapping
    Long getTaskId();

    @ApiModelProperty("进程ID")
    @Mapping
    String getPid();

    @ApiModelProperty("分类")
    @Mapping
    ActionGroup getActionGroup();

    @ApiModelProperty("行为类型")
    @Mapping
    Integer getType();

    @ApiModelProperty("网络套接字描述符")
    @Mapping
    Integer getSocketFd();

    @ApiModelProperty("目标主机")
    @Mapping
    String getHost();

    @ApiModelProperty("目标端口")
    @Mapping
    Integer getPort();

    @ApiModelProperty("参考字段")
    @Mapping
    Integer getRef();

    @ApiModelProperty("数据包大小")
    @Mapping
    Long getBytes();

    @ApiModelProperty("多个写入数据时的包大小集合，逗号分隔")
    @Mapping
    String getWriteBytes();

    @ApiModelProperty("文件路径/如果创建远程线程时执行的thread")
    @Mapping
    String getPath();

    @ApiModelProperty("文件名称")
    @Mapping
    String getFileName();

    @ApiModelProperty("文件敏感度")
    @Mapping
    FileSensitivity getSensitivity();

    @ApiModelProperty("打开文件时要求的访问权限")
    @Mapping
    Long getAccess();

    @ApiModelProperty("文件是否普通文件")
    @Mapping
    Boolean getGeneralFile();

    @ApiModelProperty("备份路径")
    @Mapping
    String getBackup();

    @ApiModelProperty("文件描述符")
    @Mapping
    String getFd();

    @ApiModelProperty("多个写入数据时的偏移量集合，逗号分隔")
    @Mapping
    String getWriteOffsets();

    @ApiModelProperty("注册表父键")
    @Mapping
    String getParent();

    @ApiModelProperty("注册表目标")
    @Mapping
    String getKey();

    @ApiModelProperty("值键")
    @Mapping
    String getValueName();

    @ApiModelProperty("值键类型")
    @Mapping
    String getValueType();

    @ApiModelProperty("值键值/发送数据(HEX编码)")
    @Mapping
    String getData();

    @ApiModelProperty("值键原类型")
    @Mapping
    String getOldValueType();

    @ApiModelProperty("值键原有值")
    @Mapping
    String getOldData();

    @ApiModelProperty("启动进程的完整命令行数据")
    @Mapping
    String getCmdLine();

    @ApiModelProperty("执行命令的PID")
    @Mapping
    String getCmdPid();

    @ApiModelProperty("创建远程线程时提供的入口函数地址 ")
    @Mapping
    String getThreadEntryAddress();

    @ApiModelProperty("消息发送目标的PID")
    @Mapping
    Long getDestPid();

    @ApiModelProperty("目标进程名称")
    @Mapping
    String getDestPName();

    @ApiModelProperty("消息发送目标窗口的句柄")
    @Mapping
    Long getDestHwnd();

    @ApiModelProperty("目标窗口标题")
    @Mapping
    String getDestTitle();

    @ApiModelProperty("消息发送源窗口的句柄")
    @Mapping
    Long getSrcHwnd();

    @ApiModelProperty("源窗口标题")
    @Mapping
    String getSrcTitle();

    @ApiModelProperty("设备名称")
    @Mapping
    String getDeviceName();

    @ApiModelProperty("目标对象名")
    @Mapping
    String getTarget();

    @ApiModelProperty("本次修改操作需要修改的目标用户")
    @Mapping
    String getOwner();

    @ApiModelProperty("本次修改操作需要修改的目标用户组")
    @Mapping
    String getGroup();

    @ApiModelProperty("DACL安全描述符字符串")
    @Mapping
    String getDaclSdString();
}